#include "../headers/heart.h"
/**
 * Se fichier est le coeur de l'application les décisions et reflexions serons faites ici.
 * @author Damien Chesneau <contact@damienchesneau.fr>
 */

int charToInt(char a);
int index_of_max(int *tab, int size);

/*
 * Fonction qui renvoie la question de la base la plus apte a etre posé.
 */
<<<<<<< .mine
char * HEART_best_question(Questions questions, Personnages personnages, int min_note, int ** reponses) {
=======
char * HEART_best_question(Questions questions, Personnages personnages, int min_note,  int reponses[2][NB_MOY_QUESTION]) {
>>>>>>> .r57
    int values[6][questions->index + 1];
    int res[questions->index + 1];
    Personnages temp = personnages;
    int i;
    int j;

    for (j = 0; j < questions->index + 1; j++) {
        for (i = 0; i < 6; i++) {
            values[i][j] = 0;
        }
        res[j] = 1;
    }

    while (temp != NULL) {
        for (i = 0; i < questions->index + 1; i++) {
            values[charToInt(temp->reponses[i])][i]++;
        }
        temp = temp->next;
    }

    for (i = 0; i < 6; i++) {
        for (j = 1; j <  questions->index + 1; j++) {
            res[i] *= (values[i][j] + 1);
        }
    }
    
    int index = index_of_max(res, questions->index+1);
    for(i = 0; i< NB_MOY_QUESTION && reponses[0][i] != -1;i++);
    if(i!= NB_MOY_QUESTION )
        reponses[0][i] = index;
    return BDD_USER_get_questions(questions, index);
    /*BDD_print_question(questions);*/
}

Personnages HEART_new_personnages(char * path, int nbPersonnage) {
    Personnages personnage;
    BDD_USER_load_personnages(&personnage, path, nbPersonnage);
    return personnage;
}

Questions HEART_new_questions(char * path) {
    Questions questions;
    BDD_USER_load_questions(&questions, path);
    return questions;
}

void HEART_update_db(Personnages personnages, int value, int index_question) {
    while(personnages != NULL){
        int perso_value = charToInt(personnages->reponses[index_question]);
        if(perso_value != 0){
            int eval = value - perso_value;
            switch(eval){
                case -4:
                    personnages->note +=-3;
                    break;
                case -3:
                    personnages->note +=-2;
                    break;
                case -2:
                    personnages->note +=-1;
                    break;
                case -1:
                    personnages->note +=1;
                    break;
                case 0:
                    personnages->note +=3;
                    break;
                case 1:
                    personnages->note +=1;
                    break;
                case 2:
                    personnages->note +=-1;
                    break;
                case 3:
                    personnages->note +=-2;
                    break;
                case 4:
                    personnages->note +=-3;
                    break;
                default:
                    fprintf(stderr,"erreur note perso\n");
                    break;
            }
        }
        personnages = personnages->next;
    }
}

void HEART_update_personnage(Personnages personnages, char* nom,  int reponses[2][NB_MOY_QUESTION], int nbQuestions) {

}

void HEART_get_path_questions(char ** path) {
    strcpy((char *) path, BIN_PATH_STANDARD);
    strcat((char *) path, QUESTIONS_NAME_STANDARD);
}

void HEART_get_path_personnage(char ** path) {
    strcpy((char *) path, BIN_PATH_STANDARD);
    strcat((char *) path, POPULATION_NAME_STANDARD);
}

int index_of_max(int *tab, int size) {
    int i;
    int res = 0;
    for (i = 0; i < size; i++) {
        if (tab[res] < tab[i])
            res = i;
    }
    return res;
}

int charToInt(char a) {
    return (int) a - 48;
}

char * HEART_best_personnage(Personnages * personnages) {
    /* To update.*/
    return (*personnages)->nom;
}